{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","execCommand","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5b0ac07c.chunk.js","sourcesContent":["//for react function based component type rfc\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                        {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\r\n                            <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light'? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired,\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Enter the title here\",\r\n    about: \"Enter  information for about\"\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    //text('new Text'); //wrong way to change the state\r\n    // setText('new Text'); //correct way to change the state\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to UpperCase!','success');\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to LowerCase!','success');\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    const handleCopy =() => {\r\n        var content = document.getElementById('myBox');\r\n        content.select();\r\n        document.execCommand('copy');\r\n    }\r\n    return(\r\n        <>\r\n    <div className='container my-3' style={{color : props.mode==='light'?'black':'white'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor : props.mode === 'dark'?'grey':'white', color : props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"6\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\"  onClick={handleUpClick}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\"  onClick={handleCopy}>Copy Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n\r\n    </div>\r\n    <div className=\"container\" style = {{color : props.mode==='light'?'black':'white'}}>\r\n        <h2>Your text Summary</h2>\r\n        <p>{text.split(' ').length} words and {text.length} characters</p>\r\n        <p>{0.08 * text.split(' ').length}Minute read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:'Enter something to above textbox to preview here'}</p>\r\n    </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n\r\n</div> \r\n  )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n// let name = \"Waleed\";\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = ('Textutils - DarkMode');\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = ('Textutils - LightMode');\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title='textUtils' about='About' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About  />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading='Enter the text below' mode={mode} />\n            {/* </Route>\n            </Switch>\n      </Router> */}\n    </>\n  );\n}\n        export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}